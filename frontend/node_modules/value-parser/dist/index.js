'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Mask = require('./Mask');

var _Mask2 = _interopRequireDefault(_Mask);

var _Validator = require('./Validator');

var _Validator2 = _interopRequireDefault(_Validator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaultOptions = {
  mask: [],
  validator: []
};

var Parser = function () {
  function Parser() {
    _classCallCheck(this, Parser);
  }

  _createClass(Parser, [{
    key: 'parse',
    value: function parse(value) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;


      var parsedValue = value;
      var isValid = null;

      parsedValue = (0, _Mask2.default)(value, options.mask);
      isValid = (0, _Validator2.default)(parsedValue, options.validator);

      return {
        value: parsedValue,
        isValid: isValid,
        isEmpty: value ? value.length < 1 : null
      };
    }
  }]);

  return Parser;
}();

;

var ValueParser = new Parser();

exports.default = ValueParser;