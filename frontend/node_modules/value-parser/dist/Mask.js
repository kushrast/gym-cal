'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _masks = require('./masks');

var masks = _interopRequireWildcard(_masks);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var Mask = function Mask(value, mask) {

  var newValue = value;

  if (!mask) return newValue;

  mask.forEach(function (item) {
    if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) == 'object') {
      var key = Object.keys(item)[0];
      if (!masks.hasOwnProperty(key)) return;
      var params = [];
      params.push(newValue);
      if (item[key].pop) {
        params = params.concat(item[key]);
      } else {
        params.push(item[key]);
      }
      newValue = masks[key].apply(null, params) || '';
    }
    if (typeof item == 'string') {
      if (!masks.hasOwnProperty(item)) return;
      newValue = masks[item](newValue) || '';
    }
  });

  return newValue;
};

exports.default = Mask;