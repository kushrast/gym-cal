'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _parsePropsAsBulmaClasses = require('../_utils/parsePropsAsBulmaClasses');

var _parsePropsAsBulmaClasses2 = _interopRequireDefault(_parsePropsAsBulmaClasses);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ContextMenu = function (_React$Component) {
  _inherits(ContextMenu, _React$Component);

  function ContextMenu() {
    _classCallCheck(this, ContextMenu);

    var _this = _possibleConstructorReturn(this, (ContextMenu.__proto__ || Object.getPrototypeOf(ContextMenu)).call(this));

    _this.state = {
      isActive: false
    };
    _this.container = _react2.default.createRef();
    _this.handleClickOutside = _this.handleClickOutside.bind(_this);
    return _this;
  }

  _createClass(ContextMenu, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      document.addEventListener('click', this.handleClickOutside, true);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.handleClickOutside, true);
    }
  }, {
    key: 'render',
    value: function render() {
      var contextMenuCSSClass = 'context-menu is-visible' + (this.state.isActive ? ' is-active' : '') + (' ' + (0, _parsePropsAsBulmaClasses2.default)(this.props));
      return _react2.default.createElement(
        'div',
        { className: contextMenuCSSClass, ref: this.container, role: 'menu' },
        _react2.default.createElement(
          'button',
          { className: 'context-menu-button has-theme-color',
            onClick: this.handleToggleState.bind(this) },
          _react2.default.createElement(_Icon2.default, { name: 'far fa-md fa-plus' })
        ),
        _react2.default.createElement(
          'div',
          { className: 'context-menu-content' },
          this.props.children
        )
      );
    }
  }, {
    key: 'handleClickOutside',
    value: function handleClickOutside(event) {
      var container = this.container.current;
      if (container && !container.contains(event.target)) this.closeContextMenu();
    }
  }, {
    key: 'handleToggleState',
    value: function handleToggleState() {
      if (_react2.default.Children.toArray(this.props.children).length < 1) {
        if (this.props.onClick) this.props.onClick();
        return;
      }
      this.setState({ isActive: !this.state.isActive });
    }
  }, {
    key: 'closeContextMenu',
    value: function closeContextMenu() {
      if (this.state.isActive) this.setState({ isActive: false });
    }
  }]);

  return ContextMenu;
}(_react2.default.Component);

exports.default = ContextMenu;
;

ContextMenu.defaultProps = {
  children: null,
  onClick: null
};

ContextMenu.propTypes = {
  onClick: _propTypes2.default.func,
  children: _propTypes2.default.any
};