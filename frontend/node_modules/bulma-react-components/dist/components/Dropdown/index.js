'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _parsePropsAsBulmaClasses = require('../_utils/parsePropsAsBulmaClasses');

var _parsePropsAsBulmaClasses2 = _interopRequireDefault(_parsePropsAsBulmaClasses);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Dropdown = function (_React$Component) {
  _inherits(Dropdown, _React$Component);

  function Dropdown() {
    _classCallCheck(this, Dropdown);

    var _this = _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).call(this));

    _this.state = {
      isActive: false
    };
    _this.container = _react2.default.createRef();
    return _this;
  }

  _createClass(Dropdown, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      document.addEventListener('click', this.handleClickOutside.bind(this), true);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.removeEventListener('click', this.handleClickOutside.bind(this), true);
    }
  }, {
    key: 'render',
    value: function render() {
      var dropdownCSSClass = 'dropdown ' + (this.state.isActive ? ' is-active' : '') + (' ' + (0, _parsePropsAsBulmaClasses2.default)(this.props));
      return _react2.default.createElement(
        'div',
        { className: dropdownCSSClass, ref: this.container },
        _react2.default.createElement(
          'div',
          {
            className: 'dropdown-trigger is-featured',
            onClick: this.toggleDropdown.bind(this),
            tabIndex: '0',
            role: 'button',
            onKeyPress: null },
          this.props.trigger
        ),
        _react2.default.createElement(
          'div',
          { className: 'dropdown-menu', role: 'menu' },
          _react2.default.createElement(
            'div',
            {
              className: 'dropdown-content',
              onClick: this.toggleDropdown.bind(this),
              tabIndex: '0',
              role: 'button',
              onKeyPress: null },
            this.props.children
          )
        )
      );
    }
  }, {
    key: 'handleClickOutside',
    value: function handleClickOutside(event) {
      var container = this.container.current;
      if (container && !container.contains(event.target)) this.closeDropdown();
    }
  }, {
    key: 'toggleDropdown',
    value: function toggleDropdown() {
      this.setState({ isActive: !this.state.isActive });
    }
  }, {
    key: 'closeDropdown',
    value: function closeDropdown() {
      if (this.state.isActive) this.setState({ isActive: false });
    }
  }]);

  return Dropdown;
}(_react2.default.Component);

exports.default = Dropdown;
;

Dropdown.Item = function (props) {
  var dropdownItemCSSClass = 'dropdown-item ' + (0, _parsePropsAsBulmaClasses2.default)(props);
  return _react2.default.createElement(
    _react2.default.Fragment,
    null,
    props.children ? _react2.default.createElement(
      'span',
      {
        onClick: props.onClick,
        onKeyDown: props.onClick,
        tabIndex: props.onClick ? '0' : '-1',
        role: 'button',
        className: dropdownItemCSSClass },
      props.children
    ) : null,
    props.hasDivider ? _react2.default.createElement('hr', { className: 'dropdown-divider' }) : null
  );
};

Dropdown.propTypes = {
  children: _propTypes2.default.any.isRequired,
  trigger: _propTypes2.default.any.isRequired
};