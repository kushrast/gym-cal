'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _parsePropsAsBulmaClasses = require('../_utils/parsePropsAsBulmaClasses');

var _parsePropsAsBulmaClasses2 = _interopRequireDefault(_parsePropsAsBulmaClasses);

var _utilsfn = require('utilsfn');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FilePreview = function (_React$Component) {
  _inherits(FilePreview, _React$Component);

  function FilePreview(props) {
    _classCallCheck(this, FilePreview);

    var _this = _possibleConstructorReturn(this, (FilePreview.__proto__ || Object.getPrototypeOf(FilePreview)).call(this, props));

    _this.state = {
      source: null
    };
    return _this;
  }

  _createClass(FilePreview, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if ((0, _utilsfn.getTypeOf)(this.props.source) === 'Promise') {
        this.handlePromise(this.props.source);
      }
    }
  }, {
    key: 'getSnapshotBeforeUpdate',
    value: function getSnapshotBeforeUpdate(prevProps) {
      var filenameChanges = this.props.filename !== prevProps.filename;
      var sourceChanges = this.props.source !== prevProps.source;
      var isPromise = (0, _utilsfn.getTypeOf)(this.props.source) === 'Promise';

      if (!isPromise && sourceChanges) {
        this.setState({ source: this.props.source });
        return null;
      }

      if (isPromise && filenameChanges) {
        this.handlePromise(this.props.source);
      }

      return null;
    }
  }, {
    key: 'render',
    value: function render() {

      var filePreviewCSSClass = 'file-preview ' + (0, _parsePropsAsBulmaClasses2.default)(this.props);

      var isImage = this.props.ext.match(/(jpg|jpeg|png|gif|svg)/);

      var preview = _react2.default.createElement('img', {
        src: this.state.source || this.props.source,
        alt: this.props.filename
      });

      if (!isImage) {
        preview = this.props.fallback || this.props.filename;
      }

      return _react2.default.createElement(
        'figure',
        {
          'data-spec-selector': this.props.specSelector,
          className: filePreviewCSSClass },
        preview
      );
    }
  }, {
    key: 'handlePromise',
    value: function handlePromise(promise) {
      var _this2 = this;

      promise.then(function (source) {
        _this2.setState({ source: source });
      });
    }
  }]);

  return FilePreview;
}(_react2.default.Component);

;

exports.default = FilePreview;