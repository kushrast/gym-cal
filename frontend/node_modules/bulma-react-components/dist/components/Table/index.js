'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _utilsfn = require('utilsfn');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Table = function (_React$Component) {
  _inherits(Table, _React$Component);

  function Table(props) {
    _classCallCheck(this, Table);

    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));

    _this.state = {
      items: _this.props.items,
      invertOrder: true
    };
    return _this;
  }

  _createClass(Table, [{
    key: 'getSnapshotBeforeUpdate',
    value: function getSnapshotBeforeUpdate(prevProps) {
      if (JSON.stringify(prevProps.items) !== JSON.stringify(this.props.items)) {
        this.setState({ items: this.props.items });
      }
      return null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var tableHeader = this.props.cells.map(function (item, index) {
        var isObject = (0, _utilsfn.getTypeOf)(item) === 'Object';
        var headerLabel = isObject ? item.name : item;
        var sortCallback = item.path ? _this2.sort.bind(_this2, item.path) : null;
        return _react2.default.createElement(
          'th',
          {
            key: index,
            className: 'datatable-cell',
            style: { cursor: item.path ? 'pointer' : null, textAlign: item.align, width: item.width },
            width: item.shrink ? '1px' : 'auto',
            onClick: sortCallback },
          _react2.default.createElement(
            'span',
            { className: item.path ? 'is-sortable' : null },
            headerLabel
          )
        );
      });

      var Cells = function Cells(props) {
        var rowKeys = Object.keys(props);
        return _this2.props.cells.map(function (item, index) {
          var content = !item.render ? function (itemData) {
            return itemData;
          } : item.render;
          var contentData = props[rowKeys[index]];
          if (item.path) contentData = (0, _utilsfn.deepKey)(props, item.path);
          var CSSClass = 'datatable-cell ' + (_this2.props.isUpdatingRows ? 'opacity has-text-grey-light' : '') + (item.isMultiline ? ' is-multiline' : '');
          return _react2.default.createElement(
            'td',
            {
              className: CSSClass,
              'data-label': item.name,
              style: { textAlign: item.align },
              key: index },
            _react2.default.createElement(
              'span',
              {
                onClick: item.onClick ? item.onClick.bind(null, props[rowKeys[index]]) : null,
                onKeyDown: item.onClick ? item.onClick.bind(null, props[rowKeys[index]]) : null,
                tabIndex: '0',
                role: 'button' },
              content(contentData, props)
            )
          );
        });
      };

      var hasActionCell = this.props.actionCell;

      var tableRows = this.state.items.map(function (item, index) {
        var onClickRow = _this2.props.onClickRow;
        return _react2.default.createElement(
          'tr',
          {
            className: 'datatable-row has-hover',
            onClick: onClickRow ? onClickRow.bind(null, item) : null,
            onKeyDown: onClickRow ? onClickRow.bind(null, item) : null,
            tabIndex: '0',
            role: 'button',
            style: { cursor: onClickRow ? 'pointer' : null },
            key: index },
          _react2.default.createElement(Cells, item),
          hasActionCell ? _react2.default.createElement(
            'td',
            { className: 'datatable-cell' },
            _react2.default.createElement(
              'div',
              { className: 'buttons' },
              _this2.props.actionCell(item)
            )
          ) : null
        );
      });

      var isEmpty = this.state.items.length < 1;

      return _react2.default.createElement(
        _react2.default.Fragment,
        null,
        isEmpty ? _react2.default.createElement(
          'div',
          { className: 'datatable-empty' },
          _react2.default.createElement(
            'table',
            { className: 'datatable' },
            _react2.default.createElement(
              'thead',
              { className: 'datatable-head' },
              _react2.default.createElement(
                'tr',
                { className: 'datatable-row' },
                _react2.default.createElement(
                  'th',
                  { className: 'datatable-cell mock-text', colSpan: '100' },
                  'The table is empty :('
                )
              )
            ),
            _react2.default.createElement(
              'tbody',
              { className: 'datatable-body' },
              _react2.default.createElement(
                'tr',
                { className: 'datatable-row' },
                _react2.default.createElement(
                  'td',
                  { className: 'datatable-cell mock-text', colSpan: '100' },
                  this.props.emptyState ? this.props.emptyState : '. . .'
                )
              )
            ),
            this.props.footer ? _react2.default.createElement(
              'tfoot',
              { className: 'datatable-footer' },
              _react2.default.createElement(
                'tr',
                { className: 'datatable-row mock-text' },
                _react2.default.createElement('td', { className: 'datatable-cell', colSpan: '100' })
              )
            ) : null
          )
        ) : _react2.default.createElement(
          'table',
          { className: 'datatable' },
          _react2.default.createElement(
            'thead',
            { className: 'datatable-head' },
            _react2.default.createElement(
              'tr',
              { className: 'datatable-row' },
              tableHeader,
              hasActionCell ? _react2.default.createElement('th', { className: 'datatable-cell', width: '1' }) : null
            )
          ),
          _react2.default.createElement(
            'tbody',
            { className: 'datatable-body' },
            tableRows
          ),
          this.props.footer ? _react2.default.createElement(
            'tfoot',
            { className: 'datatable-footer' },
            _react2.default.createElement(
              'tr',
              { className: 'datatable-row' },
              _react2.default.createElement(
                'td',
                { className: 'datatable-cell', colSpan: '100' },
                this.props.footer
              )
            )
          ) : null
        )
      );
    }
  }, {
    key: 'handleFilter',
    value: function handleFilter(_ref) {
      var target = _ref.target;

      var items = (0, _utilsfn.filterArrayBy)(this.props.items, target.value);
      this.setState({ items: items });
    }
  }, {
    key: 'sort',
    value: function sort(orderBy) {
      if (this.props.onSort) {
        this.props.onSort(orderBy);
        return;
      }
      var items = this.state.items;
      if (this.state.invertOrder) {
        items.sort(function (array1, array2) {
          if ((0, _utilsfn.deepKey)(array1, orderBy) > (0, _utilsfn.deepKey)(array2, orderBy)) return 1;
          if ((0, _utilsfn.deepKey)(array1, orderBy) < (0, _utilsfn.deepKey)(array2, orderBy)) return -1;
          return 0;
        });
      } else {
        items.sort(function (array1, array2) {
          if ((0, _utilsfn.deepKey)(array1, orderBy) < (0, _utilsfn.deepKey)(array2, orderBy)) return 1;
          if ((0, _utilsfn.deepKey)(array1, orderBy) > (0, _utilsfn.deepKey)(array2, orderBy)) return -1;
          return 0;
        });
      }
      this.setState({ items: items, invertOrder: !this.state.invertOrder });
    }
  }]);

  return Table;
}(_react2.default.Component);

exports.default = Table;
;

Table.defaultProps = {
  onSort: function onSort() {},
  onClickRow: null
};

Table.propTypes = {
  cells: _propTypes2.default.array.isRequired,
  items: _propTypes2.default.array.isRequired,
  onSort: _propTypes2.default.func,
  onClickRow: _propTypes2.default.func
};