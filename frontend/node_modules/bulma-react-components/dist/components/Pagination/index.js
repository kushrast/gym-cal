'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pagination = function (_React$Component) {
  _inherits(Pagination, _React$Component);

  function Pagination() {
    _classCallCheck(this, Pagination);

    var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this));

    _this.state = {
      currentPage: 1,
      lastPage: 10,
      firstPage: 1,
      total: 0,
      itemsPerPage: 0,
      pages: 0
    };
    return _this;
  }

  _createClass(Pagination, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.total !== nextProps.total || this.props.itemsPerPage !== nextProps.itemsPerPage) {
        var totalPages = nextProps.total / nextProps.itemsPerPage;
        this.setState({
          currentPage: nextProps.current || 1,
          pages: Math.ceil(totalPages)
        });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var totalPages = this.props.total / this.props.itemsPerPage;
      if (isNaN(totalPages)) {
        if (this.props.current) {
          if (this.props.onChange) this.props.onChange(this.props.current);
        }
        return;
      }
      this.setState({
        currentPage: this.props.current || 1,
        pages: Math.ceil(totalPages)
      });
    }
  }, {
    key: 'updatePage',
    value: function updatePage(page) {
      var currentPage = page > 0 ? page < this.state.pages ? page : this.state.pages : 1;
      var lastPage = 10;
      var firstPage = 1;
      var previousPage = this.state.currentPage;

      if (page < this.state.lastPage) {
        firstPage = currentPage < this.state.lastPage && currentPage > this.state.firstPage ? this.state.firstPage : currentPage - 1 > 0 ? currentPage - 1 : 1;
        lastPage = firstPage + 9;
        this.setState({
          currentPage: currentPage,
          firstPage: firstPage,
          lastPage: lastPage
        });
      } else {
        lastPage = currentPage < this.state.lastPage ? this.state.lastPage : currentPage + 1 < this.state.pages ? currentPage + 1 : this.state.pages;
        firstPage = currentPage > this.state.firstPage ? lastPage - 9 : currentPage;
        this.setState({
          currentPage: currentPage,
          firstPage: firstPage,
          lastPage: lastPage
        });
      }

      if (this.props.onChange) this.props.onChange(currentPage, previousPage);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _state = this.state,
          firstPage = _state.firstPage,
          lastPage = _state.lastPage,
          currentPage = _state.currentPage;
      var pages = this.state.pages;


      var pageNumbers = [];

      for (var i = firstPage; i <= (pages < 11 ? pages : lastPage); i++) {
        pageNumbers.push(i);
      }

      var pageNumbersSelect = [];

      for (var _i = firstPage; _i <= (pages < 11 ? pages : lastPage); _i++) {
        pageNumbersSelect.push(_i);
      }

      var pagesNumbers = pageNumbers.map(function (item, index) {
        var pageClasses = (0, _classnames2.default)(['pagination-link', { 'is-current': _this2.state.currentPage == item }]);
        return _react2.default.createElement(
          'li',
          {
            className: pageClasses,
            tabIndex: '0',
            role: 'button',
            key: index,
            onKeyDown: _this2.updatePage.bind(_this2, item),
            onClick: _this2.updatePage.bind(_this2, item) },
          item
        );
      });

      var pagesNumbersSelect = pageNumbersSelect.map(function (item, index) {
        return _react2.default.createElement(
          'option',
          {
            key: index,
            onKeyDown: _this2.updatePage.bind(_this2, item),
            onClick: _this2.updatePage.bind(_this2, item) },
          item
        );
      });

      if (pages < 2) return null;

      return _react2.default.createElement(
        'div',
        { className: 'pagination-container' },
        _react2.default.createElement(
          'ul',
          { className: 'pagination' },
          pages > 3 ? _react2.default.createElement(
            'li',
            {
              className: 'pagination-previous',
              tabIndex: '0',
              role: 'button',
              onKeyDown: this.updatePage.bind(this, 1),
              onClick: this.updatePage.bind(this, 1) },
            _react2.default.createElement('i', { className: 'fal fa-lg fa-angle-double-left' })
          ) : null,
          pages > 10 ? _react2.default.createElement(
            'li',
            {
              className: 'pagination-link is-arrow',
              tabIndex: '0',
              role: 'button',
              onKeyDown: this.updatePage.bind(this, this.state.currentPage - 1),
              onClick: this.updatePage.bind(this, this.state.currentPage - 1) },
            _react2.default.createElement('i', { className: 'fal fa-lg fa-angle-left' })
          ) : null,
          pagesNumbers,
          pages > 10 ? _react2.default.createElement(
            'li',
            {
              className: 'pagination-link is-arrow',
              tabIndex: '0',
              role: 'button',
              onKeyDown: this.updatePage.bind(this, this.state.currentPage + 1),
              onClick: this.updatePage.bind(this, this.state.currentPage + 1) },
            _react2.default.createElement('i', { className: 'fal fa-lg fa-angle-right' })
          ) : null,
          pages > 3 ? _react2.default.createElement(
            'li',
            {
              className: 'pagination-next',
              tabIndex: '0',
              role: 'button',
              onKeyDown: this.updatePage.bind(this, this.state.pages),
              onClick: this.updatePage.bind(this, this.state.pages) },
            _react2.default.createElement('i', { className: 'fal fa-lg fa-angle-double-right' })
          ) : null
        )
      );
    }
  }]);

  return Pagination;
}(_react2.default.Component);

exports.default = Pagination;
;

Pagination.propTypes = {};