'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.withLoading = withLoading;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTimeout = require('react-timeout');

var _reactTimeout2 = _interopRequireDefault(_reactTimeout);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultOptions = {
  time: 300
};

var LoadingContainer = function LoadingContainer(props) {
  return _react2.default.createElement(
    'div',
    { className: 'loading-container' + (props.isVisible ? ' is-visible' : '') },
    props.children
  );
};

function withLoading(Component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;

  var LoadingContainerWrapper = function (_React$Component) {
    _inherits(LoadingContainerWrapper, _React$Component);

    function LoadingContainerWrapper(props) {
      _classCallCheck(this, LoadingContainerWrapper);

      var _this = _possibleConstructorReturn(this, (LoadingContainerWrapper.__proto__ || Object.getPrototypeOf(LoadingContainerWrapper)).call(this, props));

      _this.state = { isVisible: true };
      return _this;
    }

    _createClass(LoadingContainerWrapper, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;

        this.props.setTimeout(function () {
          _this2.setState({ isVisible: false });
        }, options.time);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.setState({ isVisible: true });
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(
          _react2.default.Fragment,
          null,
          _react2.default.createElement(
            LoadingContainer,
            { isVisible: this.state.isVisible },
            _react2.default.createElement(Component, this.props)
          )
        );
      }
    }]);

    return LoadingContainerWrapper;
  }(_react2.default.Component);

  ;

  LoadingContainerWrapper.displayName = 'LoadingContainerWrapper(' + getDisplayName(Component) + ')';

  return (0, _reactTimeout2.default)(LoadingContainerWrapper);
};

function getDisplayName(Component) {
  return Component.displayName || Component.name || 'Component';
};

exports.default = LoadingContainer;