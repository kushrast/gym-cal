'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _File = require('./components/File');

var _File2 = _interopRequireDefault(_File);

var _Field = require('./components/Field');

var _Field2 = _interopRequireDefault(_Field);

var _Control = require('./components/Control');

var _Control2 = _interopRequireDefault(_Control);

var _fieldCreator = require('./fieldCreator');

var _fieldCreator2 = _interopRequireDefault(_fieldCreator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FormFieldFile = function (_React$Component) {
  _inherits(FormFieldFile, _React$Component);

  function FormFieldFile(props) {
    _classCallCheck(this, FormFieldFile);

    var _this = _possibleConstructorReturn(this, (FormFieldFile.__proto__ || Object.getPrototypeOf(FormFieldFile)).call(this, props));

    _this.state = {
      filename: null,
      files: []
    };
    return _this;
  }

  _createClass(FormFieldFile, [{
    key: 'render',
    value: function render() {

      var isValid = this.props.isValid !== null && !this.props.isValid && !this.props.isEmpty;
      var showMessage = this.props.forceInvalid && this.props.errorMessage;

      if (this.props.render) {
        return _react2.default.createElement(
          _File2.default,
          _extends({}, (0, _File.propsObject)(this.props), {
            label: this.props.label,
            onChange: this.handleFileChanges.bind(this) }),
          this.props.render(_extends({}, this.props, this.state, {
            filename: this.state.filename,
            isValid: isValid,
            showMessage: showMessage
          }))
        );
      }

      return _react2.default.createElement(
        _Field2.default,
        this.props,
        _react2.default.createElement(
          _Control2.default,
          this.props,
          _react2.default.createElement(_File2.default, _extends({}, (0, _File.propsObject)(this.props), {
            hasName: true,
            filename: this.state.filename,
            description: this.props.description,
            onChange: this.handleFileChanges.bind(this),
            isDanger: isValid || this.props.forceInvalid
          }))
        ),
        showMessage ? _react2.default.createElement(
          'p',
          { className: 'help is-danger' },
          this.props.errorMessage
        ) : null
      );
    }
  }, {
    key: 'handleFileChanges',
    value: function handleFileChanges(event) {

      var files = [];
      var filename = [];

      function readFiles(file) {
        filename.push(file.name);
        files.push({
          raw: file,
          name: file.name,
          size: file.size,
          ext: file.name ? file.name.match(/[^.]+$/)[0] : null,
          preview: function preview() {
            return new Promise(function (resolve) {
              var reader = new FileReader();
              reader.addEventListener('load', function () {
                return resolve(reader.result);
              });
              reader.readAsDataURL(file);
            });
          }
        });
      }

      if (event.target.files) {
        [].concat(_toConsumableArray(event.target.files)).forEach(readFiles);
      }

      this.setState({
        filename: filename.join(', '),
        files: files
      });

      this.props.onChange({
        target: {
          type: 'file',
          value: files
        }
      });
    }
  }], [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(props, state) {
      if (state.filename === null) {
        return {
          filename: props.filename
        };
      }
      return null;
    }
  }]);

  return FormFieldFile;
}(_react2.default.Component);

;

exports.default = (0, _fieldCreator2.default)(FormFieldFile, {
  masks: [],
  validators: []
});