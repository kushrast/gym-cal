'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactTimeout = require('react-timeout');

var _reactTimeout2 = _interopRequireDefault(_reactTimeout);

var _valueParser = require('value-parser');

var _valueParser2 = _interopRequireDefault(_valueParser);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var formFieldCreator = function formFieldCreator(Component) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var FormFieldWrapper = function (_React$Component) {
    _inherits(FormFieldWrapper, _React$Component);

    function FormFieldWrapper(props) {
      _classCallCheck(this, FormFieldWrapper);

      var _this = _possibleConstructorReturn(this, (FormFieldWrapper.__proto__ || Object.getPrototypeOf(FormFieldWrapper)).call(this, props));

      _this.state = {
        value: '',
        isEmpty: true,
        isValid: null,
        forceInvalid: false,
        wasFocused: false
      };
      _this.isTyping = false;
      return _this;
    }

    _createClass(FormFieldWrapper, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var defaultValue = this.props.valueDefault || '';
        if (options.valueType === 'boolean') {
          defaultValue = this.props.checkedDefault || false;
        }
        this.updateField(defaultValue);
        this.timer = null;
      }
    }, {
      key: 'getSnapshotBeforeUpdate',
      value: function getSnapshotBeforeUpdate(prevProps) {
        // Set default values and clear inputs when receive empty values
        if (options.valueType === 'boolean') {
          if (prevProps.checked !== this.props.checked && !this.props.checked) {
            this.updateField(this.props.checked || false);
          }
          if (prevProps.checkedDefault !== this.props.checkedDefault && !this.props.checkedDefault) {
            this.updateField(this.props.checkedDefault || false);
          }
          return null;
        }
        if (prevProps.value !== this.props.value && !this.props.value) {
          this.updateField('');
        }
        if (prevProps.valueDefault !== this.props.valueDefault) {
          var defaultValue = this.props.valueDefault || '';
          this.updateField(defaultValue);
        }
        return null;
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(Component, _extends({}, this.props, this.state, {
          onChange: this.handleFieldChanges.bind(this),
          onFocus: this.handleFieldFocus.bind(this),
          onKeyDown: this.handleKeyDown.bind(this),
          onKeyUp: this.handleKeyUp.bind(this)
        }));
      }
    }, {
      key: 'handleFieldChanges',
      value: function handleFieldChanges(_ref) {
        var target = _ref.target;

        // console.log('target.value', target.value);
        var value = target.value;
        if (target.type === 'checkbox') value = target.checked;
        this.updateField(value);
      }
    }, {
      key: 'handleFieldFocus',
      value: function handleFieldFocus() {
        this.setState({ wasFocused: true });
      }
    }, {
      key: 'handleKeyDown',
      value: function handleKeyDown() {}
    }, {
      key: 'handleKeyUp',
      value: function handleKeyUp() {
        this.props.clearTimeout(this.timer);
      }
    }, {
      key: 'updateField',
      value: function updateField(value) {
        var _this2 = this;

        this.props.clearTimeout(this.timer);

        var parsedValue = _valueParser2.default.parse(value, {
          mask: this.props.mask || options.masks,
          validator: this.props.validator || options.validators
        });

        var isValid = (value || '').length > 0 ? parsedValue.isValid : null;

        if (this.props.noValidate) {
          parsedValue.isValid = null;
          isValid = null;
        }

        this.setState({
          value: parsedValue.value,
          isEmpty: parsedValue.isEmpty,
          isValid: null,
          wasFocused: this.state.wasFocused
        });

        parsedValue.wasFocused = this.state.wasFocused;

        this.timer = this.props.setTimeout(function () {
          _this2.setState({
            isValid: isValid
          });
        }, 1000);

        if (typeof this.props.onChange === 'function') this.props.onChange(parsedValue.value, parsedValue);
      }
    }], [{
      key: 'getDerivedStateFromProps',
      value: function getDerivedStateFromProps(props, state) {
        if (state.forceInvalid !== props.forceInvalid) {
          return {
            forceInvalid: props.forceInvalid
          };
        }
        return null;
      }
    }]);

    return FormFieldWrapper;
  }(_react2.default.Component);

  ;

  FormFieldWrapper.displayName = 'FormFieldWrapper(' + getDisplayName(Component) + ')';

  return (0, _reactTimeout2.default)(FormFieldWrapper);
};

function getDisplayName(Component) {
  return Component.displayName || Component.name || 'Component';
};

exports.default = formFieldCreator;