'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDatepicker = require('react-datepicker');

var _reactDatepicker2 = _interopRequireDefault(_reactDatepicker);

require('react-datepicker/dist/react-datepicker.css');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _Input = require('./components/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Field = require('./components/Field');

var _Field2 = _interopRequireDefault(_Field);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _Control = require('./components/Control');

var _Control2 = _interopRequireDefault(_Control);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _fieldCreator = require('./fieldCreator');

var _fieldCreator2 = _interopRequireDefault(_fieldCreator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FormFieldDate = function (_React$Component) {
  _inherits(FormFieldDate, _React$Component);

  function FormFieldDate(props) {
    _classCallCheck(this, FormFieldDate);

    var _this = _possibleConstructorReturn(this, (FormFieldDate.__proto__ || Object.getPrototypeOf(FormFieldDate)).call(this, props));

    _this.state = {
      selected: (0, _moment2.default)()
    };
    _this.inputContainer = _react2.default.createRef();
    return _this;
  }

  _createClass(FormFieldDate, [{
    key: 'render',
    value: function render() {

      _moment2.default.locale('pt-BR', { longDateFormat: { L: 'DD/MM/YYYY' } });

      var isValid = this.props.isValid !== null && !this.props.isValid && !this.props.isEmpty;

      return _react2.default.createElement(
        _Field2.default,
        _extends({}, this.props, { hasAddons: true, style: { width: 141 } }),
        _react2.default.createElement(
          _Control2.default,
          this.props,
          _react2.default.createElement(
            'span',
            { ref: this.inputContainer },
            _react2.default.createElement(_Input2.default, _extends({}, (0, _Input.propsObject)(this.props), {
              isDanger: isValid || this.props.forceInvalid,
              style: { width: 108, borderTopLeftRadius: 4, borderBottomLeftRadius: 4 }
            }))
          )
        ),
        _react2.default.createElement(
          _Control2.default,
          this.props,
          _react2.default.createElement(_reactDatepicker2.default, {
            dateFormat: 'DD/MM/YYYY',
            selected: this.state.selected,
            customInput: _react2.default.createElement(
              _Button2.default,
              { type: 'button' },
              _react2.default.createElement(_Icon2.default, { name: 'fas fa-calendar-alt' })
            ),
            onChange: this.handleDateChanges.bind(this),
            className: 'button is-featured',
            disabled: this.props.isDisabled,
            popperModifiers: {
              offset: {
                enabled: true,
                escapeWithReference: true,
                boundariesElement: 'viewport',
                offset: (this.inputContainer.current ? -this.inputContainer.current.getBoundingClientRect().width + 'px' : null) + ', 0'
              }
            }
          })
        ),
        this.props.forceInvalid && this.props.errorMessage ? _react2.default.createElement(
          'p',
          { className: 'help is-danger' },
          this.props.errorMessage
        ) : null
      );
    }
  }, {
    key: 'handleDateChanges',
    value: function handleDateChanges(date) {
      this.setState({
        selected: date
      });
      this.props.onChange({
        target: {
          value: (0, _moment2.default)(date).format('DD/MM/YYYY')
        }
      });
    }
  }], [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(props, state) {
      if (props.value && state.selected.format('DD/MM/YYYY') !== (0, _moment2.default)(props.value, 'DD/MM/YYYY').format('DD/MM/YYYY')) {
        return {
          selected: (0, _moment2.default)(props.value, 'DD/MM/YYYY')
        };
      }
      return null;
    }
  }]);

  return FormFieldDate;
}(_react2.default.Component);

;

exports.default = (0, _fieldCreator2.default)(FormFieldDate, {
  masks: ['date'],
  validators: []
});