'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tooltip = function (_React$Component) {
  _inherits(Tooltip, _React$Component);

  function Tooltip() {
    _classCallCheck(this, Tooltip);

    var _this = _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this));

    _this.state = {
      style: {
        position: 'fixed',
        visibility: 'hidden',
        opacity: 0
      }
    };
    _this.onMouseOutHandler = _this.onMouseOutHandler.bind(_this);
    return _this;
  }

  _createClass(Tooltip, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('wheel', this.onMouseOutHandler);
      window.addEventListener('touchmove', this.onMouseOutHandler);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('wheel', this.onMouseOutHandler);
      window.removeEventListener('touchmove', this.onMouseOutHandler);
    }
  }, {
    key: 'onMouseOverHandler',
    value: function onMouseOverHandler() {
      var container = this.tooltipContainer.getBoundingClientRect();
      var tooltip = this.tooltip.getBoundingClientRect();
      this.setState({
        style: {
          position: 'fixed',
          zIndex: 2147483647,
          visibility: 'visible',
          opacity: 1,
          top: container.top - tooltip.height - 4,
          left: container.left - (tooltip.width / 2 - container.width / 2)
        }
      });
    }
  }, {
    key: 'onMouseOutHandler',
    value: function onMouseOutHandler() {
      this.setState({
        style: {
          position: 'fixed',
          visibility: 'hidden',
          opacity: 0
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          description = _props.description,
          direction = _props.direction,
          children = _props.children;


      var tooltipClasses = (0, _classnames2.default)(['tooltip', 'tooltip--' + direction]);

      return _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement(
          'span',
          {
            className: tooltipClasses,
            onMouseOver: this.onMouseOverHandler.bind(this),
            onPointerDown: this.onMouseOverHandler.bind(this),

            onMouseOut: this.onMouseOutHandler.bind(this),
            onTouchMove: this.onMouseOutHandler.bind(this),

            ref: function ref(element) {
              return _this2.tooltipContainer = element;
            } },
          children
        ),
        _react2.default.createElement(
          'span',
          {
            className: 'tooltip__description',
            style: this.state.style,
            ref: function ref(element) {
              return _this2.tooltip = element;
            } },
          description
        )
      );
    }
  }]);

  return Tooltip;
}(_react2.default.Component);

exports.default = Tooltip;
;

Tooltip.defaultProps = {
  direction: 'top'
};

Tooltip.propTypes = {};