'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _parsePropsAsBulmaClasses = require('../_utils/parsePropsAsBulmaClasses');

var _parsePropsAsBulmaClasses2 = _interopRequireDefault(_parsePropsAsBulmaClasses);

var _utilsfn = require('utilsfn');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Form = function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form(props) {
    _classCallCheck(this, Form);

    var _this = _possibleConstructorReturn(this, (Form.__proto__ || Object.getPrototypeOf(Form)).call(this, props));

    _this.state = {};
    _this.form = _react2.default.createRef();
    return _this;
  }

  _createClass(Form, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.props.getRef(this.form.current);
      this.setInitialFocus();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var formCSSClass = 'form ' + (0, _parsePropsAsBulmaClasses2.default)(this.props);

      return _react2.default.createElement(
        'form',
        {
          id: this.props.id,
          'data-spec-selector': this.props.specSelector || this.props.name || this.props.id,
          name: this.props.name || this.props.id,
          ref: this.form,
          onSubmit: function onSubmit(event) {
            event.preventDefault();
            _this2.props.onSubmit ? _this2.props.onSubmit(event) : null;
          },
          onFocus: function onFocus(event) {
            _this2.props.onFocus ? _this2.props.onFocus(event) : null;
          },
          className: formCSSClass,
          autoComplete: 'false' },
        this.props.children
      );
    }
  }, {
    key: 'setInitialFocus',
    value: function setInitialFocus() {
      var form = this.form;
      if (this.props.autoFocus) (0, _utilsfn.setFormInitialFocus)(form.current);
    }
  }]);

  return Form;
}(_react2.default.Component);

exports.default = Form;
;

Form.defaultProps = {
  getRef: function getRef() {}
};